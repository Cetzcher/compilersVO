%{
    #include <stdio.h>
    #include <stdlib.h>
    int yylex(void);
    void yyerror(char* );
    #include "scope.h"
%}

%token TIF
%token TTHEN
%token TELSE
%token TEND
%token TRETURN
%token TLOOP
%token TBREAK
%token TCONT
%token TVAR
%token TNOT
%token TAND

%token id
%token number
%token lessThan     /* <= */
%token assignment   /* := */

@attributes { char* name;} id
@attributes { scope *context; } VarDef ArgList Funcdef 
@attributes { scope* in; scope* out; } StatList

%%

Program: Funcdef ';'
    | Program Funcdef ';'
    ;

Funcdef: id '(' ArgList ')' StatList TEND 
    @{
        @i @Funcdef.context@ = scopedVariable(@id.name@);
        @i @StatList.in@ = combine(@StatList.out@, @ArgList.context@);  
    @}
    ;


ArgList:                @{@i @ArgList.context@ = NULL; @}
    | id                @{@i @ArgList.context@ = scopedVariable(@id.name@); @}
    | ArgList ',' id    @{@i @ArgList.0.context@ = combine(@ArgList.1.context@, scopedVariable(@id.name@)); @}
    ;

StatList: Stat ';'       
    | StatList  Stat ';'
    ;

Stat:   TRETURN Expr
    | TIF Expr TTHEN StatList TELSE StatList TEND
    | TIF Expr TTHEN StatList TEND
    | id ':' TLOOP StatList TEND
    | TBREAK id     
    | TCONT id      
    | VarDef        
    | VarAssignment 
    | Expr
    ;

VarDef: TVAR id assignment Expr @{ @i @VarDef.context@ = defineVar(newScope(), @id.name@); @}
    ;

VarAssignment: id assignment Expr
    | '*' Term assignment Expr
    ;



    /* Either a term or a term and a prefix not having this causes shift/reduce conflicts */
PrefixTerm:	'-' PrefixTerm
		| TNOT PrefixTerm
		| '*' PrefixTerm
		| Term
		;

Expr: PrefixTerm
    | Expr '+' Term
    | Expr '*' Term
    | Expr TAND Term
    | Expr lessThan Term
    | Expr '#' Term
    ;

    /* list of expressions is either expr or {expr, [expr]} in EBNF */
ExprList: Expr
    | ExprList ',' Expr
    ;

Term: '(' Expr ')'
    | number
    | id
    | Call
    ;

Call:  id '(' ExprList ')'  
    |  id '(' ')'
%%

void yyerror(char* s) {
    fprintf(stderr, "%s\n", s);
    exit(2);
}
int main() {
    yyparse();
    return 0;
}
